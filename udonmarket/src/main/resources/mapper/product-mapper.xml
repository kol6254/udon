<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="product">



	<!-- 전체 리스트 -->
	<select id="selectAll" resultType="productDTO">
	<![CDATA[
		select p.p_code, p.seller, p.title, p.price, p.pull, trunc(sysdate - p.reg_date) reg_date, substr(m.address, instr(m.address, ' ', 1, 1), instr(m.address, ' ', 1, 2)) address, wc.wish, cc.chat
		from product p left join member m on(p.seller = m.user_id)
		               left join (select a.p_code p_code, count(b.p_code) wish from product a left outer join wish b on(a.p_code = b.p_code) group by a.p_code) wc on(wc.p_code = p.p_code)
		               left join (select a.p_code p_code, count(b.p_code) chat from product a left outer join chat_room b on(a.p_code = b.p_code) group by a.p_code) cc on(cc.p_code = p.p_code)
		where p.open_status = 1 and (p.trade_status = 'S' or p.trade_status = 'R') and delete_yn = 'N'
		      and p.seller in (
		                        select l.user_id 
		                        from location l,(select latitude, longitude, radius from location where user_id = #{userId}) a
		                        where calc_distance(a.latitude, a.longitude, l.latitude, l.longitude) < a.radius and user_id != #{userId}
		                        )
		order by reg_date
	]]>
	</select>
	
	<!-- 카테고리 리스트 -->
	<select id="selectCategoryProducts" resultType="productDTO">
		select p.p_code, p.seller, p.title, p.price, p.pull, trunc(sysdate - p.reg_date) reg_date, substr(m.address, instr(m.address, ' ', 1, 1), instr(m.address, ' ', 1, 2)) address, wc.wish, cc.chat
		from product p left join member m on(p.seller = m.user_id)
		               left join (select a.p_code p_code, count(b.p_code) wish from product a left outer join wish b on(a.p_code = b.p_code) group by a.p_code) wc on(wc.p_code = p.p_code)
		               left join (select a.p_code p_code, count(b.p_code) chat from product a left outer join chat_room b on(a.p_code = b.p_code) group by a.p_code) cc on(cc.p_code = p.p_code)
		where p.open_status = 1 and (p.trade_status = 'S' or p.trade_status = 'R') and delete_yn = 'N' and p.category = #{categoryCode} order by reg_date	
	</select>

	<!-- 검색결과 리스트 -->
	<select id="search" resultType="productDTO">
		select p.p_code, p.seller, p.title, p.price, p.pull, trunc(sysdate - p.reg_date) reg_date, substr(m.address, instr(m.address, ' ', 1, 1), instr(m.address, ' ', 1, 2)) address, wc.wish, cc.chat
		from product p left join member m on(p.seller = m.user_id)
		               left join (select a.p_code p_code, count(b.p_code) wish from product a left outer join wish b on(a.p_code = b.p_code) group by a.p_code) wc on(wc.p_code = p.p_code)
		               left join (select a.p_code p_code, count(b.p_code) chat from product a left outer join chat_room b on(a.p_code = b.p_code) group by a.p_code) cc on(cc.p_code = p.p_code)
		<where>
			(p.title like '%'||#{keyword}||'%' or p.content like '%'||#{keyword}||'%')
			and p.open_status = 1 and p.trade_status = 'S' and delete_yn = 'N'
		<if test="category != 0 ">
			and p.category = #{category}
		</if>
		</where>
		order by reg_date
	</select>
	
	<!-- 전체 상품수 -->
	<select id="selectTotalCount" resultType="_int">
	<![CDATA[
		select count(*) from product p
		where p.seller in (
	                        select l.user_id 
	                        from location l,(select latitude, longitude, radius from location where user_id = #{userId}) a
	                        where calc_distance(a.latitude, a.longitude, l.latitude, l.longitude) < a.radius and user_id != #{userId}
	                      )
	]]>
	</select>
	
	<!-- 특정 카테고리 상품수 -->
	<select id="selectCategoryCount" resultType="_int">
		select count(*) from product where category = #{categoryCode}
	</select>
	
	<!-- 검색 상품수 -->
	<select id="selectSearchCount" resultType="_int">
		select count(*) from product 
		<where>
			(title like '%'||#{keyword}||'%' or content like '%'||#{keyword}||'%')
			and open_status = 1 and trade_status = 'S' and delete_yn = 'N'
		<if test="category != 0 ">
			and category = #{category}
		</if>
		</where>
	</select>
	
	<!-- 카테고리 -->
	<select id="selectAllCategory" resultType="categoryVO">
		select * from category where category_parent = 1 order by category_code
	</select>
	
	<!-- 카테고리별 상품수 -->
	<select id="selectAllCategoryCount" resultType="_int">
	<![CDATA[
		select count(p.category)
		from category c 
        left join (
                    select * from product where seller in ( select l.user_id 
                    from location l,(select latitude, longitude, radius from location where user_id = #{userId}) a
                    where calc_distance(a.latitude, a.longitude, l.latitude, l.longitude) < a.radius and user_id != #{userId})) p on(c.category_code = p.category
                   ) 
		where c.category_parent = 1 
		group by c.category_code order by c.category_code
	]]>
	</select>
	
	
	<!-- 쿠폰 조회 -->
	<select id="selectCoupon" resultType="couponDTO">
		select coupon_name, expire_date, count(coupon_name) amount from coupon 
		where user_id = #{userId} and usage_status = 0 group by(coupon_name, expire_date)
	</select>
	
	<!-- 상품 등록 -->
	<insert id="insert">
		insert into product values
		(seq_product.nextval, #{seller}, null, #{title}, #{category}, #{content}, #{price}, sysdate, 1, 'S', #{coupon}, #{offer}, 'N', 0)
	</insert>
	
	<!-- 관심 목록 등록 -->
	<insert id="addToWish">
		insert into wish values
		(seq_wish.nextval, #{userId}, #{pCode})
	</insert>
	
	<!-- 상품 조회 -->
	<select id="selectDTOByPCode" resultType="productDTO">
		select p.p_code, p.seller, p.title, p.content, p.price, p.pull, trunc(sysdate - p.reg_date) reg_date, substr(m.address, instr(m.address, ' ', 1, 1), instr(m.address, ' ', 1, 2)) address, 
			   p.category categoryCode, c.category_name category, p.trade_status, p.offer, wc.wish, cc.chat, p.reg_date original_reg_date
		from product p left join member m on(p.seller = m.user_id)
					   left join category c on(p.category = c.category_code)
		               left join (select a.p_code p_code, count(b.p_code) wish from product a left outer join wish b on(a.p_code = b.p_code) group by a.p_code) wc on(wc.p_code = p.p_code)
		               left join (select a.p_code p_code, count(b.p_code) chat from product a left outer join chat_room b on(a.p_code = b.p_code) group by a.p_code) cc on(cc.p_code = p.p_code)
		where p.p_code = #{pCode}
	</select>
	<select id="selectVOByPCode" resultType="productVO">
		select * from product where p_code = #{pCode}
	</select>
	
	<!-- 판매자 정보 -->
	<select id="selectSeller" resultType="sellerDTO">
		select m.nickname, m.original_filename, m.renamed_filename, s.total_score/s.count score
		from member m left join score s using(user_id)
		where user_id = #{id}
	</select>	
	
	<!-- 거래상태 변경 -->
	<update id="changeStatus">
		update product set trade_status = #{status} where p_code = #{pCode}
	</update>
	
	<!-- 상품 수정 -->
	<update id="update">
		update product set 
		title = #{title}, category = #{category}, content = #{content}, price = #{price}, coupon = #{coupon}, offer = #{offer}
		where p_code = #{pCode}
	</update>
	
	<!-- 상품 삭제 -->
	<update id="delete">
		update product set delete_yn = 'Y' where p_code = #{pCode}
	</update>
	
	<!-- 끌올 -->
	<update id="pull">
		update product set pull = 1, reg_date = sysdate where p_code = #{pCode}
	</update>	
	<update id="pullWithPrice">
		update product set pull = 1, reg_date = sysdate, price = #{price} where p_code = #{pCode}
	</update>	
	
	<!-- 관련 상품 -->
	<select id="selectSimilarProduct" resultType="productVO">
		select p_code, title, price from product
		<where>
		<foreach collection="keywords" item="k" open="(" close=")" separator="or">
			title like '%'||#{k}||'%' 
		</foreach>
		and p_code not in (#{pCode}) and open_status = 1 and (trade_status = 'S' or trade_status = 'R') and delete_yn = 'N'
		</where>
		union
		select p_code, title, price from product 
		where category = #{category} and p_code not in (#{pCode}) and open_status = 1 and (trade_status = 'S' or trade_status = 'R') and delete_yn = 'N'
	</select>
	
	<!-- 판매자 다른 상품 -->
	<select id="selectOtherProducts" resultType="productVO">
		select p_code, title, price from product
		where seller = #{seller} and open_status = 1 and (trade_status = 'S' or trade_status = 'R') and delete_yn = 'N'
	</select>
	
	<!-- 신고목록 -->
	<select id="reasonReport" resultType="reasonReportVO">
		select * from reason_report where parent_code = 1
	</select>
	<select id="reportListByRCode" resultType="reasonReportVO">
		select r.* ,connect_by_isleaf leaf
        from  reason_report r
        start with reason_code = #{reasonCode}
        connect by prior reason_code=parent_code
	</select>
	
	<!-- 신고하기 -->
	<insert id="reportProduct">
		insert into report values 
		(seq_report.nextval, #{reasonCode}, #{reportId}, null, null, null, 0, #{pCode})
	</insert>
	<insert id="reportUser">
		insert into report values 
		(seq_report.nextval, #{reasonCode}, #{reportId}, #{shooterId}, null, null, 0, null)
	</insert>
	
	<!-- 관심목록 가격 변동 알림을 위한 수신자 리스트 -->
	<select id="selectWishUserId" resultType="string">
		select wish.user_id from wish, product
		where wish.p_code = product.p_code
		and product.p_code = #{pCode}
	</select>
</mapper>
